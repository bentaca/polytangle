#!/usr/bin/env perl
#
# Copyright (C) 2023  Ben Taca
#
# Use of this source code is governed by an MIT-style license
# that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.
#
# notes:
#
# Noweb
# =====
#
# <<mycode>>=
# let foo = 3;
# @
# <<myfile.ml>>=
# <<mycode>>
# @
#
# Org Mode
# ========
#
# Titled Blocks
# -----------
#
#  title: ref / ref.lang
#  begin: (lang)
#
# #+name: <name>
# #+begin_src <language> <switches> <header arguments>
#  my $code is "nice";
#  <<insert>>
#+end_src
#
#
# Inline Blocks
# ------
# begin: lang, ref/ref.lang
#
#  #+begin_src python :noweb-ref literate-main-imports
#
# Markdown Code Blocks
# =====================
#
#
# Classic Titled Code Blocks
# ------------------------
#
#  title: ref / ref.lang
#  begin: lang
#
#  cmd: `pandoc --from=markdown+fenced_code_blocks t.md >t.html`
#
#  eg:
#     # User Data {#userdata.json}
#     This is some json
#     ```json
#     { "firstName": "John", }
#     ```
#
# Inline Code Blocks
# ----------------------
#  title: -
#  begin: ref, lang
#
#  cmd: `pandoc --from=markdown+fenced_code_attributes`
#
#  eg:
#     ``` {#mycode.pl .haskell .numberLines startFrom="100"}
#     print("hey");
#     ```
#
#     :tangle test/compiler/ferret.clj
#     :noweb-ref clojure-unit-tests
#
# TODO (default header in org mode): #+PROPERTY: header-args :tangle .emacs
#
# Notes
# ----
#
# The C Preprocessor Way
# #include "declarations.h"
# ########

our $USAGE = 'file <tag>' ;

use strict ;
use warnings ;
use Data::Dumper ;
use File::Basename ;
use Getopt::Long qw(GetOptions) ;

my ( $_print_opt, $_save_opt, $_cmd_opt, $_comment_opt, $_docsyntax_opt, $_codesyntax_opt, $_quiet ) ;
GetOptions(
   'print'         => \$_print_opt,
   'save'         => \$_save_opt,
   'cmt'         => \$_comment_opt,
   'doc-syntax'  => \$_docsyntax_opt,
   'code-syntax' => \$_codesyntax_opt,
   'quiet'       => \$_quiet,
   ) ;

my %_doc_filetypes = (
   mkdnoweb    => [ qw( .mnw  ) ],
   noweb    => [ qw( .nw .noweb ) ],
   markdown => [ qw( .md .mkd .markdown ) ],
   org      => [ qw(. org ) ],
   ) ;

my %_comment_formats = (
   '(* %s *)' => [ qw( standardml ocaml) ],
   '# %s'     => [ qw( perl text make  shell ruby python ) ],
   '// %s'    => [ qw( dlang cpp javascript  reasonml ) ],
   '; %s'     => [ qw( lisp scheme ) ],
   ) ;

sub get_linedir_formatstr {
   my ($basename) = @_;
   return { 
      qq(# %d "$basename")         => [ qw( ocaml) ],
      qq(#line %d "$basename")     => [ qw( cpp perl text make shell ruby python ) ],
      qq|(*line %d "$basename" *)| => [ qw( standardml ) ],
      qq(//line %d "$basename")    => [ qw( dlang javascript  reasonml  ) ],
      qq(;line %d "%s")     => [ qw( lisp scheme clojure  ) ],
   } ;
}

# common patterns for references and syntaxes
#  syntax
my $match_sytx          = qr,[\-\w]+, ;
my $capture_sytx        = qr,($match_sytx), ;
my $capture_sytx_ws     = qr,\s*($match_sytx)\s*, ;
my $capture_sytx_opt_ws = qr,\s*($match_sytx)*\s*, ;

# references
my $match_ref      = qr,[\.\-\w]+, ;
my $capture_ref    = qr,($match_ref), ;
my $capture_ref_ws = qr,\s*($match_ref)\s*, ;
my $capture_ref_id = qr,\s*(\#$match_ref)\s*, ;

### including
# <<ref>>
# #include <<ref>>
# @{ref}
#
my $_inc_noweb     = qr,\<\<$capture_ref_ws\>\>, ;
my $_inc_noweb_cpp = qr,\#include\s+$_inc_noweb, ;
my $_inc_atcurly   = qr,\@\{$capture_ref_ws\}, ;

## Noweb
# todo titles: \section{Introduction} \label{introduction}
my $_nw_begin_refname     = qr|^\s*(<<)$capture_ref>>=\s*$| ;
my $_nw_begin_lookalike   = qr,^\s*<<, ;
my $_nw_title_lookalike   = qr,^\s*\\section, ;
my $_nw_include_lookalike = qr,^\s*<<, ;
my $_nw_end_lookalike     = qr,^\s*\@, ;
my $_nw_include           = qr,^\s*$_inc_noweb\s*$, ;


## Orgmode
my $_org_capture_begin   = qr,\s*(\#\+begin_src)\s*, ;
my $_org_title_lookalike = qr,^\s*\#\+name\:, ;                   # $1: title
my $_org_title_refname   = qr,^\s*\#\+name\:$capture_ref_ws, ;    # $1: title
my $_org_begin_syntax =
   qr,^$_org_capture_begin\s$capture_sytx_opt_ws, ;               # $1:lang
my $_org_begin_syntax_refname =
   qr,^$_org_capture_begin\s$capture_sytx_opt_ws.*(?<=\:tangle)\s*$capture_ref_ws.*$,
   ;
my $_org_begin_bare = qr,^$_org_capture_begin$, ;

my $_org_begin_lookalike   = qr,^\s*\#\+begin_src, ;
my $_org_end_lookalike     = qr,^\s*\#\+end_src, ;
my $_org_include_lookalike = qr,^\s<<, ;
my $_org_include           = $_nw_include ;

## lookalikes

# # Markdown
# markdown title with reference
#
my $_mkd_capture_ref_curly = qr,\s*\{\s*\#$capture_ref\s*\}\s*, ;
my $_mkd_title_refname     = qr,^\s*\#+\s+.+$_mkd_capture_ref_curly.*$, ;
my $_mkd_title_lookalike   = qr,^\s*\#+, ;

# markdown fence
my $_mkd_capture_fence    = qr,(?|(```)`*|(~~~)~*), ;
my $_mkd_capture_fence_ws = qr,\s*$_mkd_capture_fence\s*, ;

my $_mkd_begin_lookalike = qr,^\s*(?:```+|~~~+|<<), ;

my $_mkd_include_lookalike = qr,^\s*(?:<<|#incl|\@\{.+\}), ;
my $_mkd_include = qr,^\s*(?|$_inc_noweb|$_inc_noweb_cpp|$_inc_atcurly)\s*$, ;

my $_mkd_begin_bare = qr,^$_mkd_capture_fence_ws$, ;

my $_mkd_begin_syntax     = qr,^$_mkd_capture_fence$capture_sytx_opt_ws$, ;

my $_mkd_begin_refname_syntax = qr,^\s*(?|(?:(```+|~~~+)\s*\{\s*\#([\w\-\.]+)\s*(?:\.([\.\w\-]+))?.*\}))\s*$,;

my $_mkd_end_lookalike = qr,^\s*(?:```+|~~~+|@), ;

## Mkdnoweb
# todo titles: \section{Introduction} \label{introduction}


my %_tangle_regexes = (
   markdown => {
      'begin-refname-syntax' => $_mkd_begin_refname_syntax,
      'title-refname'        => $_mkd_title_refname,
      'title-lookalike'      => $_mkd_title_lookalike,
      'begin-syntax'         => $_mkd_begin_syntax,
      'begin-lookalike'      => $_mkd_begin_lookalike,
      'end-lookalike'        => $_mkd_end_lookalike,
      'include-lookalike'    => $_mkd_include_lookalike,
      'include'              => $_mkd_include,
      'begin-bare'           => $_mkd_begin_bare,

      },
   orgmode => {
      'begin-syntax-refname' => $_org_begin_syntax_refname,
      'title-refname'        => $_org_title_refname,
      'title-lookalike'      => $_org_title_lookalike,
      'begin-syntax'         => $_org_begin_syntax,
      'begin-lookalike'      => $_org_begin_lookalike,
      'end-lookalike'        => $_org_end_lookalike,
      'include-lookalike'    => $_org_include_lookalike,
      'include'              => $_org_include,
      'begin-bare'           => $_org_begin_bare,
      },
   noweb => {
      'begin-refname'     => $_nw_begin_refname,
      'begin-lookalike'   => $_nw_begin_lookalike,
      'title-lookalike'   => $_nw_title_lookalike,
      'end-lookalike'     => $_nw_end_lookalike,
      'include-lookalike' => $_nw_include_lookalike,
      'include'           => $_nw_include,
      },
   mkdnoweb => {
      'begin-refname'     => qr;^\s*(<<)$capture_ref>>=\s*$; ,
      'begin-lookalike'   => qr;^\s*<<;,
      'end-lookalike'     => qr;^\s*\@;,
      'include-lookalike' => qr;^\s*<<;,
      'include'           => qr;^\s*$_inc_noweb\s*$;,
      }
) ;


my %_end_code_mark = (
   '#+begin_src' => qr|\s*\#\+end_src\s*$|,
   '~~~'         => qr|^\s*~~~+\s*$|,
   '```'         => qr|^\s*```+\s*$|,
   '<<'          => qr|^\s*\@\s*$|,
   ) ;

sub find_key {
   my ( $dict, $key, $errmsg ) = @_ ;
   if ( exists $dict->{ $key } ) {
      return $dict->{ $key } ;
   } else {
      if ( $errmsg ) {
         my ( $package, $filename, $line ) = caller ;
         die $errmsg . ": " . $key . ", line:" . $line ;
      } else {
         return undef ;
         }
      }

   }

sub hash_reverse {
   my ( $hash ) = @_ ;

   my %new_hash = () ;
   foreach my $key ( keys %$hash ) {
      my $val = $hash->{ $key } ;

      if ( ref $val eq 'ARRAY' ) {
         foreach my $item ( @$val ) {
            $new_hash{ $item } = $key ;
            }
         }
      }
   return \%new_hash ;
   }

sub parse {
   my ( $lines, $rx ) = @_ ;

   # mandatory regexes
   my ( $begin_refname_rx )        = find_key( $rx, 'begin-refname');
   my ( $begin_syntax_refname_rx ) = find_key( $rx, 'begin-syntax-refname' ) ;
   my ( $begin_refname_syntax_rx ) = find_key( $rx, 'begin-refname-syntax' ) ;

   die "Err: need a least one begin regex" 
      unless($begin_refname_rx or $begin_syntax_refname_rx or $begin_refname_syntax_rx);


   my ( $begin_lookalike_rx )   = find_key( $rx, 'begin-lookalike', 
      "Err: could not fetch key" ) ;
   my ( $end_lookalike_rx )     = find_key( $rx, 'end-lookalike', 
      "Err: could not fetch key" ) ;
   my ( $include_lookalike_rx ) = find_key( $rx, 'include-lookalike', 
      "Err: could not fetch key" ) ;
   my ( $include_rx )           = find_key( $rx, 'include' , 
      "Err: could not fetch key") ;

   # optional regexes
   my ( $title_lookalike_rx )      = find_key( $rx, 'title-lookalike' ) ;
   my ( $title_rx )                = find_key( $rx, 'title-refname' ) ;
   my ( $begin_syntax_rx )         = find_key( $rx, 'begin-syntax' ) ;
   my ( $begin_bare_rx )           = find_key( $rx, 'begin-bare' ) ;


   # states
   my ( @codeblock, @codelines ) ;
   my ( $incode,    $intitle ) ;
   my ( %index, %includes ) ;

   my $push_txt_codeblock = sub {
      if ( @codelines ) {
         my ( $syntax, $lnr ) = @_ ;
         push @codeblock, [ txt => $lnr, join( "\n", @codelines ), $syntax ] ;
         ( @codelines ) = () ;
         }
      } ;

   my $find_begin_set_incode = sub {
      my ( $ln, $lni, ($title) ) = @_ ;

      my ( $leader, $syntax, $refname, $end ) ;

      if ( $begin_syntax_refname_rx ) {
         ( $leader, $syntax, $refname ) =
            ( $ln =~ /$begin_syntax_refname_rx/ ) ;
      }elsif ( $begin_refname_syntax_rx ) {
         if ( $begin_refname_syntax_rx ) {
            ( $leader, $refname , $syntax) = ( $ln =~ /$begin_refname_syntax_rx/ ) ;
            }
      }

      unless ( $leader ) {
         if ( $begin_refname_rx ) {
            ( $leader, $refname ) = ( $ln =~ /$begin_refname_rx/ ) ;
            }
         }
      unless ( $leader ) {
         if ( $begin_bare_rx ) {
            ( $leader ) = ( $ln =~ /$begin_syntax_rx/ ) ;
            $refname = ($title) ? $title : '*';
            }
         }

      if ( $leader ) {
         my ( $end ) = find_key( \%_end_code_mark, $leader,
            "Err: could not find end marker called from" ) ;
         return ($lni, $syntax, $refname, $end ) ;
      }else{
         return ();
      }

   } ;

   my ( $lni ) = ( 0 ) ;
   foreach my $ln ( @$lines ) {
      chomp $ln ;
      $lni++ ;
      my @line = () ;
      if ( $incode ) {    # Inside a Codeblock
         if ( $ln =~ /$end_lookalike_rx/ ) {

            my ($end_rx) = $$incode[$#$incode];

            if ( $ln =~ /$end_rx/ ) {
                  
               my ( $lnr, $syntax, $refname, $end ) = @$incode ;
               $push_txt_codeblock->( $syntax, $lnr ) ;

               $refname = '*' unless $refname ;

               # update codeblock
               if ( exists $index{ $refname } ) {
                  my ( $blocksyntax, @existing_blocks ) =
                     @{ $index{ $refname } } ;
                  push @existing_blocks, @codeblock ;
                  $index{ $refname } = [ $blocksyntax, @existing_blocks ] ;
               } else {
                  $index{ $refname } = [ $syntax, @codeblock ] ;
                  }
               ( @codeblock, $incode, $intitle, $end ) = () ;
               }
         } elsif ( $ln =~ /$include_lookalike_rx/ ) {
            my ( $inc_name ) = ( $ln =~ /$include_rx/ ) ;
            if ( $inc_name ) {
               my ( $lnr, $syntax, @refname_end ) = @$incode ;
               $push_txt_codeblock->( $syntax, $lnr ) ;
               push @codeblock, [ ref => $lni, $inc_name ] ;
               $includes{ $inc_name } = 1 ;
               $incode = [ $lni, $syntax, @refname_end ] ;
               }
         } else {
            push @codelines, $ln ;
            }
      } elsif ( $intitle ) {    # After a Title definition, outside a Code Block
         if ( $ln =~ $begin_lookalike_rx ) {
            my ( $leader, @stx_refn_end ) = $find_begin_set_incode->( $ln, $lni, $intitle ) ;
            if($leader){
               $incode = [ $leader, @stx_refn_end];
               undef $intitle if ( $leader ) ;
            }
         }
      } else {    # Outside of Code and Title and Inside Documentation
         if($title_lookalike_rx){
            if($ln =~ /$title_lookalike_rx/){
               ( $intitle ) = ( $ln =~ /$title_rx/ );
            }
         }

         unless ( $intitle ) {
            if ( $ln =~ /$begin_lookalike_rx/ ) {
               my ( $leader, @stx_refn_end ) = $find_begin_set_incode->( $ln, $lni, $intitle ) ;
               $incode = [ $leader, @stx_refn_end] if ($leader);
            }
          }
      }
   }

   die "Err: no closing string for code section" if ( $incode ) ;

   return ( \%index, \%includes ) ;
   }

# structure:
# {
#  ref : block[lines]
#  ref: { refx: [ [ cmd, ln, text, (syntax) ]
#                 [ cmd, ln, text, (syntax)] ] }

sub resolve_ref {
   my ( $index, $extractor, $linedir_formats, $comment_formats,
      $code_filetypes, $file_doc_syntax, $file_code_syntax )
      = @_ ;

   my $get_syntax = get_syntax( $code_filetypes ) ;

   my ( $errcode, $extractor_syntax ) = $get_syntax->( $extractor ) ;

   # ignore errcode

   my $get_linedir_fmt = sub {
      my ( $formats, $lnr, $blksyntax, $lnsyntax, $refname_syntax ) = @_ ;
      my $syntax ;
      foreach
         my $stx ( $lnsyntax, $blksyntax, $refname_syntax, $extractor_syntax,
         $file_code_syntax ) {
         if ( $stx ) {
            if ( $syntax ) {
               unless ( $syntax eq $stx ) {
                  die "Err: syntax mismatch ('$stx'/'$syntax')" ;
                  }
            } else {
               $syntax = $stx ;
               }
            }
         }
      return ( exists $formats->{ $syntax } )
         ? $formats->{ $syntax }
         : die "Err: syntax for $syntax not exists" ;
         } ;

   my $rec ;
   $rec = sub {
      my ( $refname ) = @_ ;
      if ( exists $index->{ $refname } ) {
         my ( $blocksyntax, $first, @rest ) = @{ $index->{ $refname } } ;
         if ( ref $first eq 'ARRAY' ) {
            my ( $errcode, $refname_syntax ) = $get_syntax->( $refname ) ;

            # ignore $errcode
            #
            my ( @blocklines ) ;
            foreach my $blockln ( $first, @rest ) {
               my ( $cmd, $lnr, $txt, $syntax ) = @$blockln ;
               if ( $cmd eq 'ref' ) {
                  my $fmt = $get_linedir_fmt->(
                     $comment_formats, $lnr, $blocksyntax,
                     $syntax,          $refname_syntax
                     ) ;
                  push @blocklines,
                     sprintf( $fmt, "including $txt (ln:$lnr) " ) ;
                  push @blocklines, $rec->( $txt ) ;
               } else {
                  my $fmt = $get_linedir_fmt->(
                     $linedir_formats, $lnr, $blocksyntax,
                     $syntax,          $refname_syntax
                     ) ;
                  push @blocklines, sprintf( $fmt, $lnr ) ;
                  push @blocklines, $txt ;
                  }
               }
            my ( $blocktext ) = join( "\n", @blocklines ) ;
            $index->{ $refname } = [ $blocksyntax, $blocktext ] ;
            return $blocktext ;
         } else {
            return $first ;
            }
      } else {
         die "Err: reference '$refname' doesn't exists" ;
         }

      } ;
   return $rec->( $extractor ) ;
   }

sub get_syntax {
   my ( $langs ) = @_ ;

   return sub {
      my ( $token, $place ) = @_ ;
      my $result ;
      if ( $token =~ /[^.]+(\.\w+)(\.\w+)$/ ) {
         die
            "Err: no place given for the file with 2 extensions for token '$token'"
            unless ( defined( $place ) ) ;
         my @results = ( $1, $2 ) ;
         $result = $results[ $place ] ;
      } elsif ( $token =~ /[^.]+(\.\w+)$/ ) {
         if ( defined( $place ) ) {
            $result =
               ( $place == 0 )
               ? undef
               : $1 ;
         } else {
            $result = $1 ;
            }
         }

      if ( $result ) {
         return ( exists $langs->{ $result } )
            ? ( 0, $langs->{ $result } )
            : ( 1, "could not find entry for '$result' for input '$token'" ) ;
         }
      } ;
   }

sub get_syntax_from_file {
   my ( $dict, $opt_value, $basename, $place ) = @_ ;

   my $get_syntax = get_syntax( $dict ) ;

   if ( $opt_value ) {
      return ( exists $dict->{ $opt_value } )
         ? ( 0, $dict->{ $opt_value } )
         : (
         2,
         "Err: this option '$opt_value' is not a valid file extension for defining documentation syntax"
         ) ;
   } else {
      return $get_syntax->( $basename, $place ) ;
      }
   }

sub data_hash {
   my %hash ;
   while ( my $ln = <DATA> ) {
      chomp $ln ;
      my ( $ext, $lang ) = split( /\s*:\s*/, $ln ) ;
      if ( exists $hash{ $ext } ) {
         die "Err: already exists : $ext: $hash{$ext}\n" ;
      } else {
         $hash{ $ext } = $lang ;
         }
      }
   return \%hash ;
   }

sub main {

   my ( $filename, @extractors ) ;
   if ( @ARGV == 0 ) {
      die "usage: $USAGE" ;
   } elsif ( @ARGV == 1 ) {
      ( $filename, @extractors ) = ( $ARGV[ 0 ], '*' ) ;
   } else {
      ( $filename, @extractors ) = @ARGV ;
      }

   die "Err: file '$filename' doesn't exists" unless ( -f $filename ) ;

   open( my $fh, '<', $filename ) || die "Err: can not open file $filename" ;
   my @lines = <$fh> ;
   close $fh ;

   my $code_filetypes = data_hash() ;

   my ( $doc_filetypes ) = hash_reverse( \%_doc_filetypes ) ;

   #my ( $code_filetypes ) = hash_reverse( $proglang_filetypes ) ;
   #
  my $basename = basename( $filename ) ;
  my ($name,$path,$ext) = fileparse($filename,qr,\..[^.]*$,);



   my ( $errcode, $file_doc_syntax ) =
      get_syntax_from_file( $doc_filetypes, $_docsyntax_opt, $basename, 1 ) ;

   die
      "Err: could not get syntax from docfile '$basename': ('$file_doc_syntax')"
      if ( $errcode ) ;

   my ( $tangle_regexes ) =
      ( exists $_tangle_regexes{ $file_doc_syntax } )
      ? $_tangle_regexes{ $file_doc_syntax }
      : die "Err: could not find doc syntax " ;

   my ( $index, $includes ) = parse( \@lines, $tangle_regexes ) ;

   my $linedir_formatstr_index =  get_linedir_formatstr($basename); 

   my $linedir_formats = hash_reverse( $linedir_formatstr_index ) ;
   my $comment_formats = hash_reverse( \%_comment_formats ) ;

   my $file_code_syntax =
      get_syntax_from_file( $code_filetypes, $_codesyntax_opt, $basename, 0 ) ;


   foreach my $extractor ( @extractors ) {
      my ( $text ) =
         resolve_ref( $index, $extractor, $linedir_formats,
         $comment_formats, $code_filetypes, $file_doc_syntax,
         $file_code_syntax ) ;

      if ($text){
         if($_save_opt){
            my $outfile = ($extractor eq '*')
               ? $name
               : $extractor;
            open(my $fh, '>', $outfile) || die "Err: could not create out file";
            if(-f $name){
               seek($fh,0,0);
               print $fh $text;
               truncate($fh, tell($fh));  # remove everything after current file position
            }else{
               print $fh $text;
            }
            close($fh);

            if($_print_opt){
               print($text);
            }
         }else{
            print $text
         }
      }
   }
}


main ;

__DATA__
.1:groff
.1in:groff
.1m:groff
.1x:groff
.2:groff
.3:groff
.3in:groff
.3m:groff
.3qt:groff
.3x:groff
.4:groff
.4th:forth
.5:groff
.6:groff
.6pl:perl6
.6pm:perl6
.7:groff
.8:groff
.9:groff
.ASM:nasm
.R:splus
.Rout:rconsole
.S:gas
._coffee:coffeescript
._js:javascript
._ls:livescript
.a51:assembly
.abap:abap
.ada:ada
.adb:ada
.ado:stata
.adoc:asciidoc
.adp:tcl
.ads:ada
.agda:agda
.ahk:autohotkey
.ahkl:autohotkey
.aj:aspectj
.al:perl
.als:alloy
.ampl:ampl
.anim:unity3d-asset
.ant:xml
.apacheconf:apacheconf
.apib:api-blueprint
.apl:apl
.applescript:applescript
.arc:arc
.arpa:dns-zone
.as:actionscript
.asax:asp
.asc:public-key
.asciidoc:asciidoc
.ascx:asp
.asd:common-lisp
.ash:ags-script
.ashx:asp
.asm:assembly
.asmx:asp
.asp:asp
.aspx:asp
.asset:unity3d-asset
.asy:asy
.au3:autoit
.aug:augeas
.auk:awk
.aux:tex
.aw:php
.awk:awk
.axd:asp
.axi.erb:netlinx+erb
.axi:netlinx
.axml:xml
.axs.erb:netlinx+erb
.axs:netlinx
.b:limbo
.bas:visual-basic
.bash:shell
.bat:batchfile
.bats:shell
.bb:blitzbasic
.bbx:tex
.befunge:befunge
.bf:hyphy
.bib:tex
.bison:bison
.bmx:blitzmax
.bones:javascript
.boo:boo
.boot:clojure
.brd:kicad
.bro:bro
.brs:brightscript
.bsv:bluespec
.builder:ruby
.bzl:python
.c++-objdump:cpp-objdump
.c++:c++
.c++objdump:cpp-objdump
.c-objdump:c-objdump
.c:c
.cake:coffeescript
.capnp:capn-proto
.cats:c
.cbl:cobol
.cbx:tex
.cc:c++
.ccp:cobol
.ccxml:xml
.cdf:mathematica
.ceylon:ceylon
.cfc:coldfusion-cfc
.cfg:ini
.cfm:coldfusion
.cfml:coldfusion
.cgi:shell
.ch:xbase
.chpl:chapel
.chs:c2hs-haskell
.cirru:cirru
.cjsx:coffeescript
.ck:chuck
.cl2:clojure
.cl:opencl
.click:click
.clixml:xml
.clj:clojure
.cljc:clojure
.cljs.hl:clojure
.cljs:clojure
.cljscm:clojure
.cljx:clojure
.clp:clips
.cls:visual-basic
.clw:clarion
.cmake.in:cmake
.cmake:cmake
.cmd:batchfile
.cob:cobol
.cobol:cobol
.coffee:coffeescript
.com:digital-command-language
.command:shell
.coq:coq
.cp:component-pascal
.cpp-objdump:cpp-objdump
.cpp:c++
.cppobjdump:cpp-objdump
.cproject:xml
.cps:component-pascal
.cpy:cobol
.cql:sql
.cr:crystal
.creole:creole
.cs:smalltalk
.csh:tcsh
.cshtml:c#
.csl:xml
.cson:coffeescript
.csproj:xml
.css:css
.csv:csv
.csx:c#
.ct:xml
.ctp:php
.cu:cuda
.cuh:cuda
.cw:redcode
.cxx-objdump:cpp-objdump
.cxx:c++
.cy:cycript
.d-objdump:d-objdump
.d:makefile
.darcspatch:darcs-patch
.dart:dart
.dats:ats
.db2:sqlpl
.dcl:clean
.ddl:sql
.decls:blitzbasic
.def:modula2
.desktop.in:desktop
.desktop:desktop
.dfm:pascal
.di:d
.diff:diff
.dita:xml
.ditamap:xml
.ditaval:xml
.djs:dogescript
.dll.config:xml
.dlm:idl
.dm:dm
.do:stata
.dockerfile:dockerfile
.doh:stata
.dot:graphviz-(dot)
.dotsettings:xml
.dpatch:darcs-patch
.dpr:pascal
.druby:mirah
.dtx:tex
.duby:mirah
.duel:duel
.dyalog:apl
.dyl:dylan
.dylan:dylan
.e:eiffel
.eam.fs:formatted
.ebuild:gentoo-ebuild
.ec:ec
.ecl:eclipse
.eclass:gentoo-eclass
.eclxml:ecl
.edn:edn
.eex:html+eex
.eh:ec
.el:emacs-lisp
.eliom:ocaml
.eliomi:ocaml
.elm:elm
.em:emberscript
.emacs.desktop:emacs-lisp
.emacs:emacs-lisp
.emberscript:emberscript
.epj:ecere-projects
.eps:postscript
.erb.deface:html+erb
.erb:html+erb
.erl-sh:erl
.erl:erlang
.es6:javascript
.es:javascript
.escript:erlang
.evoque:evoque
.ex:elixir
.exs:elixir
.f03:fortran
.f08:fortran
.f77:fortran
.f90:fortran
.f95:fortran
.f:forth
.factor:factor
.fan:fantom
.fancypack:fancy
.fcgi:shell
.feature:cucumber
.fhtml:velocity
.filters:xml
.fish:fish
.flex:jflex
.flux:flux
.flx:felix
.flxh:felix
.for:forth
.forth:forth
.fp:glsl
.fpp:fortran
.fr:text
.frag:javascript
.frg:glsl
.frm:visual-basic
.frt:forth
.frx:visual-basic
.fs:glsl
.fsh:glsl
.fshader:glsl
.fsi:fsharp
.fsproj:xml
.fsx:fsharp
.fth:forth
.ftl:freemarker
.fun:standard-ml
.fx:hlsl
.fxh:hlsl
.fxml:xml
.fy:fancy
.g4:antlr
.g:gap
.gap:gap
.gawk:awk
.gco:g-code
.gcode:g-code
.gd:gdscript
.gemspec:ruby
.geo:glsl
.geojson:json
.geom:glsl
.gf:grammatical-framework
.gi:gap
.glade:xml
.glf:glyph
.glsl:glsl
.glslv:glsl
.gml:xml
.gms:gams
.gnu:gnuplot
.gnuplot:gnuplot
.go:go
.god:ruby
.golo:golo
.gp:gnuplot
.grace:grace
.gradle:gradle
.graphql:graphql
.groovy:groovy
.grt:groovy
.grxml:xml
.gs:javascript
.gshader:glsl
.gsp:groovy-server-pages
.gst:gosu
.gsx:gosu
.gtpl:groovy
.gv:graphviz-dot
.gvy:groovy
.gyp:python
.h++:c++
.h:objective-c
.haml.deface:haml
.haml:haml
.handlebars:handlebars
.hats:ats
.hb:harbour
.hbs:handlebars
.hcl:hcl
.hh:hack
.hic:clojure
.hlean:lean
.hlsl:hlsl
.hlsli:hlsl
.hpp:c++
.hqf:sqf
.hrl:erlang
.hs:haskell
.hsc:haskell
.htaccess:apacheconf
.htm:html
.html.hl:html
.html:html
.http:http
.hx:haxe
.hxsl:haxe
.hxx:c++
.hy:hy
.hyb:hybris
.i7x:inform-7
.iced:coffeescript
.icl:clean
.idc:c
.idr:idris
.ihlp:stata
.ijs:j
.ik:ioke
.ily:lilypond
.iml:xml
.inc:sourcepawn
.ini:ini
.inl:c++
.ino:arduino
.ins:tex
.intr:dylan
.io:io
.ipf:igor-pro
.ipp:c++
.ipynb:jupyter-notebook
.irbrc:ruby
.irclog:irc-log
.iss:inno-setup
.ivy:xml
.j:objective-j
.jade:jade
.jake:javascript
.java:java
.jbst:duel
.jbuilder:ruby
.jelly:xml
.jflex:jflex
.jinja:html+django
.jl:julia
.jq:jsoniq
.js:javascript
.jsb:javascript
.jscad:javascript
.jsfl:javascript
.jsm:javascript
.json5:json5
.json:json
.jsonld:jsonld
.jsp:java-server-pages
.jsproj:xml
.jss:javascript
.jsx:jsx
.kicad_pcb:kicad
.kid:genshi
.kit:kit
.kml:xml
.krl:krl
.ksh:shell
.kt:kotlin
.ktm:kotlin
.kts:kotlin
.l:picolisp
.lagda:literate-agda
.las:lasso
.lasso8:lasso
.lasso9:lasso
.lasso:lasso
.latte:latte
.launch:xml
.lbx:tex
.ld:linker-script
.ldml:lasso
.lds:linker-script
.lean:lean
.less:less
.lex:lex
.lfe:lfe
.lgt:logtalk
.lhs:literate-haskell
.lid:dylan
.lidr:idris
.liquid:liquid
.lisp:newlisp
.litcoffee:literate-coffeescript
.ll:llvm
.lmi:python
.lock:json
.logtalk:logtalk
.lol:lolcode
.lookml:lookml
.lpr:pascal
.ls:loomscript
.lsl:lsl
.lslp:lsl
.lsp:newlisp
.ltx:tex
.lua:lua
.lvproj:labview
.ly:lilypond
.m4:m4sugar
.m:objective-c
.ma:mathematica
.mak:makefile
.mako:mako
.man:groff
.mao:mako
.maql:maql
.markdown:markdown
.mask:mask
.mat:unity3d-asset
.mata:stata
.matah:stata
.mathematica:mathematica
.matlab:matlab
.mawk:awk
.maxhelp:max
.maxpat:max
.maxproj:max
.mc:mason
.mcr:maxscript
.md:markdown
.mdpolicy:xml
.me:groff
.mediawiki:mediawiki
.meta:unity3d-asset
.metal:metal
.mhtml:mason
.mi:mason
.minid:minid
.mir:mirah
.mirah:mirah
.mk:makefile
.mkd:markdown
.mkdn:markdown
.mkdown:markdown
.mkfile:makefile
.mkii:tex
.mkiv:tex
.mkvi:tex
.ml4:ocaml
.ml:ocaml
.mli:ocaml
.mll:ocaml
.mly:ocaml
.mm:xml
.mmk:module-management-system
.mms:module-management-system
.mo:modelica
.mod:xml
.monkey:monkey
.moo:moocode
.moon:moonscript
.ms:maxscript
.mspec:ruby
.mss:cartocss
.mt:mathematica
.mtml:mtml
.mu:mupad
.muf:muf
.mumps:m
.mustache:html+django
.mxml:xml
.mxt:max
.myt:myghty
.n:nemerle
.nasm:assembly
.nawk:awk
.nb:text
.nbp:mathematica
.nc:nesc
.ncl:text
.nginxconf:nginx
.ni:inform-7
.nim:nimrod
.nimrod:nimrod
.ninja:ninja
.nit:nit
.nix:nix
.njs:javascript
.nl:newlisp
.nlogo:netlogo
.no:text
.nproj:xml
.nqp:perl6
.ns2:newspeak
.nse:lua
.nsh:nsis
.nsi:nsis
.nu:nu
.numpy:numpy
.numpyw:numpy
.numsc:numpy
.nuspec:xml
.nut:squirrel
.ny:common-lisp
.objdump:objdump
.odd:xml
.omgrofl:omgrofl
.ooc:ooc
.opa:opa
.opal:opal
.opencl:opencl
.org:org
.osm:xml
.owl:web-ontology-language
.ox:ox
.oxh:ox
.oxo:ox
.oxygene:oxygene
.oz:oz
.p6:perl6
.p6l:perl6
.p6m:perl6
.p:openedge-abl
.pac:javascript
.pan:pan
.parrot:parrot
.pas:pascal
.pasm:parrot-assembly
.pat:max
.patch:diff
.pb:purebasic
.pbi:purebasic
.pck:plsql
.pd:pure-data
.pd_lua:lua
.pde:processing
.perl:perl
.ph:perl
.php3:php
.php4:php
.php5:php
.php:php
.phps:php
.phpt:php
.phtml:html+php
.pig:piglatin
.pike:pike
.pir:parrot-internal-representation
.pkb:plsql
.pkl:pickle
.pks:plsql
.pl6:perl6
.pl:perl
.plb:plsql
.plist:xml
.plot:gnuplot
.pls:plsql
.plsql:plsql
.plt:gnuplot
.pluginspec:xml
.plx:perl
.pm6:perl6
.pm:perl6
.pmod:pike
.po:gettext-catalog
.pod:pod
.podsl:common-lisp
.podspec:ruby
.pogo:pogoscript
.pony:pony
.pot:gettext-catalog
.pov:pov-ray-sdl
.pp:puppet
.prc:sql
.prefab:unity3d-asset
.prefs:ini
.prg:xbase
.pri:qmake
.pro:qmake
.prolog:prolog
.properties:ini
.props:xml
.proto:protocol-buffer
.prw:xbase
.ps1:powershell
.ps1xml:xml
.ps:postscript
.psc1:xml
.psc:papyrus
.psd1:powershell
.psgi:perl
.psm1:powershell
.pt:xml
.pub:public-key
.purs:purescript
.pwn:pawn
.pxd:cython
.pxi:cython
.py3tb:py3tb
.py:python
.pyde:python
.pyp:python
.pyt:python
.pytb:python-traceback
.pyw:python
.pyx:cython
.qbs:qml
.qml:qml
.r2:rebol
.r3:rebol
.r:rebol
.rabl:ruby
.rake:ruby
.raml:raml
.raw:raw-token-data
.rb:ruby
.rbbas:realbasic
.rbfrm:realbasic
.rbmnu:realbasic
.rbres:realbasic
.rbtbar:realbasic
.rbuild:ruby
.rbuistate:realbasic
.rbw:ruby
.rbx:ruby
.rbxs:lua
.rd:r
.rdf:xml
.rdoc:rdoc
.re:reasonml
.reb:rebol
.rebol:rebol
.red:red
.reds:red
.reek:yaml
.res:reasonml
.rest.txt:restructuredtext
.rest:restructuredtext
.rg:rouge
.rhtml:rhtml
.rkt:racket
.rktd:racket
.rktl:racket
.rl:ragel-in-ruby-host
.rmd:rmarkdown
.rno:groff
.robot:robotframework
.roff:groff
.ron:markdown
.rpy:renpy
.rq:sparql
.rs.in:rust
.rs:rust
.rsh:renderscript
.rss:xml
.rst.txt:restructuredtext
.rst:restructuredtext
.rsx:r
.ru:ruby
.ruby:ruby
.rviz:yaml
.s:gas
.sage:sage
.sagews:sage
.sas:sas
.sass:sass
.sats:ats
.sbt:scala
.sc:supercollider
.scad:openscad
.scala:scala
.scaml:scaml
.scd:supercollider
.sce:scilab
.sch:kicad
.sci:scilab
.scm:scheme
.scpt:applescript
.scrbl:racket
.scss:scss
.scxml:xml
.self:self
.sexp:common-lisp
.sh-session:shellsession
.sh.in:shell
.sh:shell
.shader:glsl
.shen:shen
.sig:standard-ml
.sj:objective-j
.sjs:javascript
.sl:slash
.sld:scheme
.slim:slim
.sls:scheme
.sma:sourcepawn
.smali:smali
.sml:standard-ml
.smt2:smt
.smt:smt
.sp:sourcepawn
.sparql:sparql
.spin:propeller-spin
.sps:scheme
.spt:cheetah
.sqf:sqf
.sql:sqlpl
.sqlite3-console:sqlite3
.srdf:xml
.ss:scheme
.ssjs:javascript
.ssp:ssp
.st:smalltalk
.stan:stan
.sthlp:stata
.ston:ston
.storyboard:xml
.sttheme:xml
.sty:tex
.styl:stylus
.sublime-build:javascript
.sublime-commands:javascript
.sublime-completions:javascript
.sublime-keymap:javascript
.sublime-macro:javascript
.sublime-menu:javascript
.sublime-mousemap:javascript
.sublime-project:javascript
.sublime-settings:javascript
.sublime-snippet:xml
.sublime-syntax:yaml
.sublime-theme:javascript
.sublime-workspace:javascript
.sublime_metrics:javascript
.sublime_session:javascript
.sv:systemverilog
.svg:svg
.svh:systemverilog
.swift:swift
.syntax:yaml
.t:turing
.tab:sql
.tac:python
.targets:xml
.tcc:c++
.tcl:tcl
.tcsh:tcsh
.tea:tea
.tex:tex
.textile:textile
.tf:hcl
.thor:ruby
.thrift:thrift
.thy:isabelle
.tm:tcl
.tmcommand:xml
.tml:xml
.tmlanguage:xml
.tmpl:cheetah
.tmpreferences:xml
.tmsnippet:xml
.tmtheme:xml
.tmux:shell
.toc:tex
.toml:toml
.tool:shell
.topojson:json
.tpl:smarty
.tpp:c++
.ts:typescript
.tst:scilab
.tsx:typescriptreact
.ttl:turtle
.tu:turing
.twig:twig
.txl:txl
.txt:text
.uc:unrealscript
.udf:sql
.ui:xml
.unity:unity3d-asset
.uno:uno
.upc:unified-parallel-c
.ur:urweb
.urdf:xml
.urs:urweb
.ux:xml
.v:verilog
.vala:vala
.vapi:vala
.vark:gosu
.vb:visual-basic
.vba:visual-basic
.vbhtml:visual-basic
.vbproj:xml
.vbs:visual-basic
.vcl:vcl
.vcxproj:xml
.veo:verilog
.vert:glsl
.vh:systemverilog
.vhd:vhdl
.vhdl:vhdl
.vhf:vhdl
.vhi:vhdl
.vho:vhdl
.vhost:nginx
.vhs:vhdl
.vht:vhdl
.vhw:vhdl
.vim:viml
.vimrc:vim
.viw:sql
.vm:velocity
.volt:volt
.vrx:glsl
.vsh:glsl
.vshader:glsl
.vssettings:xml
.vue:vue
.vxml:xml
.w:c
.watchr:ruby
.webidl:webidl
.weechatlog:irc-log
.wiki:mediawiki
.wisp:wisp
.wl:mathematica
.wlt:mathematica
.wlua:lua
.wsdl:xml
.wsf:xml
.wsgi:python
.wxi:xml
.wxl:xml
.wxs:xml
.x10:x10
.x3d:xml
.x:logos
.xacro:xml
.xaml:xml
.xc:xc
.xht:html
.xhtml:html
.xi:logos
.xib:xml
.xlf:xml
.xliff:xml
.xm:logos
.xmi:xml
.xml.dist:xml
.xml:xml
.xojo_code:xojo
.xojo_menu:xojo
.xojo_report:xojo
.xojo_script:xojo
.xojo_toolbar:xojo
.xojo_window:xojo
.xpl:xproc
.xproc:xproc
.xproj:xml
.xpy:python
.xq:xquery
.xql:xquery
.xqm:xquery
.xquery:xquery
.xqy:xquery
.xrl:erlang
.xs:xs
.xsd:xml
.xsjs:javascript
.xsjslib:javascript
.xsl:xslt
.xslt:xslt
.xsp-config:xpages
.xsp.metadata:xpages
.xtend:xtend
.xul:xml
.y:yacc
.yacc:yacc
.yaml-tmlanguage:yaml
.yaml:yaml
.yang:yang
.yap:prolog
.yml:yaml
.yrl:erlang
.yy:yacc
.zcml:xml
.zep:zephir
.zimpl:zimpl
.zmpl:zimpl
.zone:dns-zone
.zpl:zimpl
.zsh:shell
1:groff
2:groff
3:groff
4:groff
5:groff
6:groff
7:groff
8:groff
9:groff
CMakeLists.txt:cmake
GNUmakefile:make
Makefile.:make
Makefile:make
Rakefile:rb
SConscript:python
SConstruct:python
apache.conf:apacheconf
apache2.conf:apacheconf
autodelegate:myghty
autohandler:mason
control:control
dhandler:mason
makefile:make
sources.list:sourceslist
squid.conf:squidconf
